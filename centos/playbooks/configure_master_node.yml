---
- hosts: kubernetes-master-nodes
  become: yes
  vars_files:
  - env_variables
  tasks:
  - name: Pulling images required for setting up a Kubernetes cluster
    shell: kubeadm config images pull

  - name: Resetting kubeadm
    shell: kubeadm reset -f
    register: output

  - name: delete cni dir if present
    shell: rm -rf /etc/cni/net.d
    ignore_errors: yes

  - name: Remove kubeadm.yaml if exist
    shell: rm -f /tmp/kubeadm.yaml
    ignore_errors: yes

  - name: Creating a repository file for Kubernetes
    file:
     path: /tmp/kubeadm.yaml
     state: touch

  - name: Adding repository details in Kubernetes repo file.
    blockinfile:
     path: /tmp/kubeadm.yaml
     block: |
      apiVersion: kubeadm.k8s.io/v1beta2
      bootstrapTokens:
      - groups:
        - system:bootstrappers:kubeadm:default-node-token
        token: abcdef.0123456789abcdef
        ttl: 24h0m0s
        usages:
        - signing
        - authentication
      kind: InitConfiguration
      localAPIEndpoint:
        advertiseAddress: {{ad_addr}}
        bindPort: 6443
      nodeRegistration:
        criSocket: /var/run/dockershim.sock
        name: localhost.localdomain
        taints:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
      ---
      apiServer:
        timeoutForControlPlane: 4m0s
      apiVersion: kubeadm.k8s.io/v1beta2
      certificatesDir: /etc/kubernetes/pki
      clusterName: kubernetes
      controllerManager: {}
      dns:
        type: CoreDNS
      etcd:
        local:
          dataDir: /var/lib/etcd
      imageRepository: k8s.gcr.io
      kind: ClusterConfiguration
      kubernetesVersion: v1.20.0
      networking:
        dnsDomain: cluster.local
        serviceSubnet: 10.96.0.0/12
        podSubnet: {{cidr_v}}
      scheduler: {}

  - name: Initializing Kubernetes cluster
    shell: kubeadm init --config /tmp/kubeadm.yaml
    register: output

  - name: Storing Logs and Generated token for future purpose.
    local_action: copy content={{ output.stdout }} dest={{ token_file }}
    become: False

  - name: Copying required files
    shell: |
     echo $HOME
     mkdir -p $HOME/.kube
     sudo cp -f /etc/kubernetes/admin.conf $HOME/.kube/config
     sudo chown $(id -u):$(id -g) $HOME/.kube/config
     rm -rf /home/{{user_id}}/.kube
     mkdir -p /home/{{user_id}}/.kube
     sudo cp -f /etc/kubernetes/admin.conf /home/{{user_id}}/.kube/config
     sudo chown $(id -u {{user_id}}):$(id -g {{user_id}}) /home/{{user_id}}/.kube/config

  - name: sleep for 1 minute
    pause:
      minutes: 1

  - name: Install Calico CNI CRD
    command: kubectl create -f https://docs.projectcalico.org/manifests/tigera-operator.yaml

  - name: Remove calico.yaml if exist
    shell: rm -f /tmp/calico.yaml
    ignore_errors: yes

  - name: Creating a calico.yaml file for Kubernetes
    file:
     path: /tmp/calico.yaml
     state: touch

  - name: Adding repository details in Kubernetes repo file.
    blockinfile:
     path: /tmp/calico.yaml
     block: |
      apiVersion: operator.tigera.io/v1
      kind: Installation
      metadata:
        name: default
      spec:
        # Configures Calico networking.
        calicoNetwork:
          # Note: The ipPools section cannot be modified post-install.
          ipPools:
          - blockSize: 24
            cidr: {{cidr_v}}
            encapsulation: VXLANCrossSubnet
            natOutgoing: Enabled
            nodeSelector: all()

  - name: Create Calico CRD to deploy CNI
    shell: kubectl create -f /tmp/calico.yaml

  - name: sleep for 1 minute
    pause:
      minutes: 1
